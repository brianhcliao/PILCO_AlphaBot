%% alphabotControl.m
% *Summary:* Apply control signal onto AlphaBot
%
%   function [ nextState ] = alphabotControl(curState, u, plant)
%
% *Input arguments:*
%   
%   u              Control signal
%   mypi           handle to RPi
%
% *Output arguments:*
%
%   states         AlphaBot entire trajectory states
%
% Copyright (C) 2018-2019 by 
% Brian Liao
%
% Last modification: 2019-01-22
%
%% High-Level Steps
% For each time step
% # Apply control signal
% # Measure states through sensors
% # Feedback state changes


function [ states ] = alphabotControl(u, mypi)
%% Code

% Add path to utility
addpath('./utility/');

% Save controls to file
wfile = fopen('controls.txt', 'w');
for i = 1:length(u) 
    u(i,:) = u(i,:) .* 0.25;
    fprintf( wfile, '%f\n', u(i,:));
end
fclose(wfile);

% Transmit file
putFile(mypi,'./controls.txt')

% Call RPi Python funciton
syste

% Wait for user trigger
disp('Press a button to continue');
pause;

% Fetch file
getFile(mypi,'states.txt');

% Read states from file
rfile = fopen('states.txt', 'r');
formatSpec = '%f %f';
sizeOfStates = [2 Inf];
states = fscanf(rfile, formatSpec, sizeOfStates)
fclose(rfile);























% % Integrate u into PWM duty cycle
% delta_dutyCycle = u * plant.dt;
% dutyCycle = state(2) + delta_dutyCycle;
% 
% % Cap duty cycle into [0, 1]
% if dutyCycle > 1
%     dutyCycle = 1;
% elseif dutyCycle < 0
%     dutyCycle = 0;
% end
% 
% % Take movement
% writePWMDutyCycle(mypi, 13, dutyCycle);
% %java.lang.Thread.sleep(plant.dt * 1000);
% 
% % Measure states
% dist = get_distance(mypi);
% dist_mapped = mapfun(dist, 250, 50, 0, 2);
% 
% % Feedback next state
% nextState(1) = dist_mapped;
% nextState(2) = dutyCycle;






